{
    // 변수를 선언하면?

    // 변수 고유식별자를 생성하고, 메모리에 주소를 할당한다.
    // 최종적으로 생성한 주소에 값을 넣는다. 

    // 식별자는 값이 들어있는 메모리 주소를 가리킴 
    let variable = 126;
    
    // 값을 +1할 경우, 새로운 메모리주소를 할당받고 그 주소에 더한 값을 넣음
    // 왜냐하면, JS에서 원시타입은 변경불가하기 때문 (항상 원시타입 값을 변경시키는 경우 항상 메모리가 새로 할당)
    varable = varable+1;
}

{
    // 자바스크립트엔진은 가상머신으로 구현된다.
    // 이는 힙 영역과 콜스택 영역으로 구성된다.

    // 힙: 참조타입이 들어감
    // 콜스택: 원시타입이 들어감

    // 원시타입 : 콜스택에 들어감
    let a = 10;
    let b = 20;

    // 배열은 참조타입 : 힙에 들어감
    // 배열 선언 시, 힙에 배열 영역이 생성됨
    // 콜스택에 생성된 배열 변수는 힙에 생성된 배열의 메모리주소를 참조(가리킴)
    // 힙 영역 메모리는 동적으로 크기가 변하므로, 배열에 값을 추가하면 힙 메모리 영역에 그대로 참조
    const arr = [];
}

{
    // 사용을 마친 메모리는 가비지 컬렉터에 의해 메모리가 정리된다.
    // 사용하지 않는 메모리를 해제하는 역할을 한다.

    // 현대적 브라우저 가비지 컬렉터는 mark and sweep algorithm를 통해 메모리를 정리
    // 브라우저 최상위 객체인 window에서 시작해 닿을 수없는 주소는 더이상 필요없는 주소로 정의하고 지우는 알고리즘 
}