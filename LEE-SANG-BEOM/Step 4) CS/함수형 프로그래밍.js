프로그램은 순차->분기->반복->참조로 구성된다. 
 - 함수형 패러다임
  > 불변성을 지향하기에 동작을 예측하기 쉽고, side effect를 방지한다.
  > 함수단위로 나눠지므로, 재사용성이 높다. 
  > 객체지향은 추상화의 최소단위가 객체이고, 함수형은 함수가 최소단위이다.effect를
  > 문제를 어떻게 처리할 것인지가 아니라, 무엇을 할 것인지에 중점
  
  기존 명령형 프로그래밍: 문제를 어떻게 해결해야하는지 컴퓨터에게 명령을 내리는 방법
  선언형 프로그래밍: 무엇을 해결해야하는지에 집중하고, 해결법은 컴퓨터에게 위임
  절차지향 프로그래밍: 수행되어야 할 순차적인 처리 과정을 포함하는 방식 (C, C++)
  객체지향 프로그래밍: 객체들의 집합으로 프로그램의 상호작용을 표현 (C++, Java, C#)
  함수형 프로그래밍: 순수 함수를 조합하고 소프트웨어를 만드는 방식 (클로저, 하스켈, 리스프)


1. 함수형 프로그래밍 장점/단점
 - 상태(변수)가 없으므로, side effect 없음
   > but) 변수가 없어, 조작할 수 없으니 변수를 수정해야 할 일이 생기면 다른 방법을 찾아야 함
   > 값을 수정한 요소를 새로 만들어, 대체하는 방식
   > 쓸데없는 메모리, 성능사용

 - 재사용성 높음
   > but) 쪼개지는 함수가 너무 많은 것도 문제

 - 코드가 짧고 간결
   > but) 많은 숙련도 요구

2. 선언형 프로그래밍
 - 기존 명령형 프로그래밍: 문제를 어떻게 해결해야하는지 찾고, 그것을 컴퓨터에게 명령을 내리는 방법
 - 선언형 프로그래밍: 무엇을 해결해야하는지에 집중하고, 해결법은 컴퓨터에게 위임하는 방법

 3. 기존 명령형 프로그래밍: control flow로 데이터제어
    하지만 함수형 프로그래밍은 data flow를 사용한다.
    이는 상태가 존재하지 않고, 재귀나 파이프를 통해 데이터가 흘러간다는 뜻이다.

     -> 데이터 제어없이 필요한 함수만 조합하여 문제해결이 가능하다
     -> 자바스크립트는 멀티패러다임이 가능하다. 굳이 객체지향, 함수형으로 나눌필요없이 둘다가능!
