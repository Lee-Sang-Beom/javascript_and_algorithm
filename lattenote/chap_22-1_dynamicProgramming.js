/*

[동적 계획법]
- 동적 계획법
: 해결한 작은 문제로 큰 문제를 해결하는 문제 풀이 방식

1. 문제 해결 방식을 의미함. (특정 알고리즘이 아님.)
2. Dynamic Programming(DP)라고도 부름.
3. 메모리 많이 사용, 빠른 성능 
4. 방법론 두 가지
- 메모이제이션(Memoization)
- 타뷸레이션(Tabulation)

[메모이제이션]
1. 하향식 접근법
=> 작은 문제를 저장해두었다가 꺼내 쓰는 것.

2. 동적계획법에서 작은 문제들의 결과는 항상 같음.
3. 이 결과들을 메모리에 저장한 다음, 필요할 때 꺼내 쓰는 것.

[피보나치 수열]
-> 중복된 계산이 많음.
=> 이미 해결한 문제는 기록해두자 => 메모이제이션

- 피보나치 수열의 가장 작은 문제

1. fibonacci(1) = 1
2. fibonacci(2) = 1

- 작은 문제로 큰 문제를  해결 할 수 있는가?
=> 규칙 존재 시 가능.
f(n) = f(n-1) + f(n-2)

[타뷸레이션]
1. 상향식 접근법
2. 필요한 값들을 미리 계산해두는 것
예) 미리 값들을 구해 두고 f(5)의 값 8을 꺼내쓰는 것을 타뷸레이션.

3. 
- 메모이제이션 - 필요할 때 계산(Lazy evaluation)
- 타뷸레이션 - 미리 계산(Eager evaluation)

4. 보통 코딩 테스트에선 메모이제이션 사용.

[동적계획법 접근 방법]
1. 문제 유형 알 수 없을 경우.
- 가장 작은 문제 정의
- 작은 문제를 통해 큰 문제를 해결할 수 있는 규칙이 있는가?

*/