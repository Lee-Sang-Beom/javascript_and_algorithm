/*
[비트 마스크]

0. 비트 연산자
: 비트를 직접 조작하는 연산자

1. 이진법 성질을 이용하여 문제를 해결하는 방법
2. 특정 알고리즘은 아니고 비트 연산을 이용한 일종의 코딩 기법.
3. 이진수가 자료구조로 사용된다.
4. 배열 대신 이진수를 이용.
5. 굉장히 빠르고 메모리 사용량이 적음.
6. 다른 알고리즘과 함께 사용 가능 (예) 그리디, 동적계획법)

[비트를 배열(집합)처럼 사용]
1. false로 초기화
=> bit = 0;

2. N개 만큼 true로 초기화
=> bit = (1<<N) - 1;

3. i번째 요소 true로 바꾸기
=> bit |= (i<<i);

4. i번째 요소 false로 바꾸기
=> bit &= ~(1 << i);

5. i번째 요소 토글하기 
=> bit ^= (1 << i );

6. i번째 요소가 true인지 체크하기.
=> bit & (1<<i);

[두 집합끼리 연산]
1. 합집합 -> A | B
2. 교집합 -> A & B;
3. A에서 B를 뺀 차집합 -> A & (~B);
4. 합집합에서 교집합 제외 (xor) -> A^B;

* 연산자 우선 순위 주의.

*/