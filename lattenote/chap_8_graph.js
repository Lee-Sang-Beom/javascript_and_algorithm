const Index = () => {
  return (
    <>
      <p>test</p>
    </>
  );
};

export default Index;

// 그래프 : 정점과 정점 사이를 연결하는 간선으로 이루어진 비선형 자료구조.
// 정점 집합과 간선 집합으로 표현 가능.

// 예제) 지하철 노선도, 페이지 랭크(검색 알고리즘 - 하나의 페이지가 정점, 페이지에서 파생 - 간선)

/*
[그래프의 특징]
1. 정점은 여러 개의 간선 가질 수 있다.
2. 방향 그래프 / 무방향 그래프
3. 간선은 가중치를 가질 수 있다.
4. 사이클 발생 가능.

[방향 그래프]
1. 간선에 방향성이 존재하는 그래프

[연결 그래프]
1. 모든 정점이 서로 이동 가능한 그래프

[비연결 그래프]
1. 특정 정점쌍 사이에 간선이 존재하지 않는 그래프

[완전 그래프]
1. 모든 정점끼리 연결된 상태인 그래프

[사이클]
1. 그래프의 정점과 간선의 부분 집합에서 순환이 되는 부분

[그래프 구현 방법]
1. 인접 행렬
2. 인접리스트
*/

// 인접 행렬 구현
// const graph = Array.from(
//   Array(5),
//   () => Array(5).fill(false)
// );

// graph[0][1] = true; // 0 -> 1
// graph[0][3] = true; // 0 -> 3

// 인접리스트

const graph = Array.from(
  Array(5),
  () => []
);
graph[0].push(1);