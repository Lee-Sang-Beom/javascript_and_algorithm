/*

[컴퓨터 시간]

시간: 시각과 시각 사이 간격을 표현하는 단위.

[시간은 어떻게 결정될까?]
1. 물리량
2. 위치
3. 천문현상

4. 문화
5. 역사
6. 사회

[규칙 존재하지 않는.. 역사, 사회. 이 경우엔?]

=> [협정 세계시 (UTC)]

[컴퓨터가 시간을 표현하는 방법]
1. 하드웨어의 시스템 클럭을 이용.
2. 특정 시각(Epoch)을 기준으로 시스템 클럭의 틱을 세는 것으로 구현.
=> [시스템 시간]이라고 부름.
3. 타임스탬프 : 시스템 시간을 값으로 표현한 것.
=> 운영체제마다 기준 시간과 단위가 다를 수 있다.
4. Unix Time: 유닉스 계열 운영체제에서 시간을 표시하는 방법.

[시스템 클럭 원리]
1. RTC(Real Time Clock) 모듈 사용.
2. RTC => 카운터 회로를 통해 클럭을 발생시킴.

[Unix Time]
1. 기준 시각: 1970년 1월 1일 0시 0분 0초
2. 1970년 이전 시간은 음수로 표현.
3. 초단위로 시간 증가.

[현재 시간 아는 방법]
1. 시스템 시간을 NTP(Network Time Protocol)와 동기화
2. NTP 서버에 네트워크 요청 => 현재 시간 받음
3. NTP 서버는 계층(Stratum)으로 이루어짐
4. 최상위 계층 => PRC(Primary Reference Clock)

[시간대 고려]
1. Time Zone 데이터 이용
2. 표기법 => 대륙/도시 형태 => ZoneId라고 부른다.

=> 서비스에서 사용되는 시간을 용도에 맞춰서 기록할 필요 있음.

[순수한 시간]
예) 시간대와 지역, 문화, 사회를 고려하지 않고 순수하게 시간을 기록해야하는 경우.
1. 생일
2. 기업 설립일
3. 기념일
4. 국경일

[UTC]
1. 사건이 발생한 시각만을 고려
예)
1. 로깅
2. 감사
3. 시계열 데이터

[Time Zone이 적용된 시간]
1. 역사, 사회, 문화를 고려하여 사용자가 이용한 시각을 정확히 알아야할 때.
예)
1. 결제 시각
2. 푸시 알림 시간
3. UI 시각 표시
4. 캘린더

[자바스크립트에선?]
- Date 객체 사용
- 또는 대체 라이브러리 date-fns, luxon 사용.






*/