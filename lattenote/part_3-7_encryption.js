/*

[암호화 기초]

[암호화]
1. 평문을 해독할 수 없는 암호문으로 변환하는 것을 의미
2. 종류: 단방향(해싱), 양방향 암호화 존재.

[단방향 암호화]
1. 해시 알고리즘을 이용하여 평문을 복호화 할 수 없는 형태로 암호화한다.
2. 예) MD5, SHA
3. 사용자 비밀번호 등을 저장할 때 자주 사용.
4. MD5와 SHA-0, SHA-1 => 해시 충돌 발생할 수 있는 취약점 있기에 사용 권하지 않음.

[단방향 암호화에서 고려할 점]
1. 복호화 불가능, Rainbow Table을 통해 원문 알기 가능.
=> Rainbow Table은 평문과 해시 함수로 만든 문자열을 모두 저장시켜 놓은 표를 말한다.
=> 암호화된 데이터를 탈취당하더라도 원문을 알아 낼 수 없도록 조치해야 함.
=> Salt, Key stretching을 이용하여 해결 가능.

[Salt]
1. 평문에 임의의 무낮열 추가하여 암호화하는 방법.
2. 128bit 이상으로 만들 것을 권장.
3. 사용자마다 다른 Salt 사용 => 더 안전함.

[Key stretching]
1. 해시를 여러 번 반복하여 원문을 알기 힘들게 만드는 방법.
2. 일반적인 시스템에서 0.2초 이상 반복되면 안전.

[관련 알고리즘]
1. PBKDF2
- NIST에서 승인된 알고리즘

2. bcrypt
- 비밀번호 저장 목적으로 탄생.
- OpenBSD에서 기본으로 사용하고 있는 알고리즘.

Alg + Cost + Salt + Hash

[양방향 암호화]
1. 평문을 복호화 할 수 있는 형태로 암호화.
2. 대칭키와 비대칭키 알고리즘으로 나뉨.
3. 대칭키 이용하는 AES, 비대칭키 이용하는 RSA

[대칭키 암호 알고리즘 - AES]
1. 같은 키 이용하여 암호화, 복호화 가능.

[비대칭키 암호 알고리즘 - RSA]
1. 공개키(모든 사람이 접근 가능), 개인키
2. 소인수 분해를 기반으로 만들어진 알고리즘.

[js에선?]
1. crypto-js
2. crypto-js에선 bcrypt 구현 안되어 있음 -> node.bcrypt.js에서.








*/