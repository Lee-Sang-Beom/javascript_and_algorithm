/*

[엣지 케이스 잘 찾는 방법]
// https://bakyeono.net/post/2015-05-02-edge-case-corner-case.html

1. 엣지 케이스란?
: 알고리즘이 처리하는 데이터의 값이 알고리즘의 특성에 따른
일정한 범위를 넘을 경우에 발생하는 문제를 가리킨다.

* 코너 케이스
: 여러 가지 변수와 환경의 복합적인 상호작용으로 발생하는 문제.

[엣지 케이스 예]
1. 입력 값의 크기가 굉장히 작은 케이스
2. 입력 값의 크기가 굉장히 큰 케이스
3. 입력 값의 범위가 넓은 케이스 (A는 최소값, B가 최대값인 경우)
4. 음수 입력이 허용된 경우 음수만 입력받는 케이스.
5. 리스트를 입력 받을 때 값이 없거나 하나만 있는 케이스.

-- 상황에 따른 엣지케이스
1. 그래프에서 사이클 발생하는 경우
2. 길찾기 문제에서 지그재그로 움직일 경우
3. 부동소수점 오차

[문제 읽기 전 "입출력 제한" 부터 보기]
=> 입력 제한을 통해 어떤 시간복잡도 내에 풀어야 하는지 알 수 있음.

1. 입력 100 이하
- 완전 탐색
- 백트래킹

2. 입력 10,000 이하
- 최대 O(n^2) 이내로 끝내야하는 문제
- 문제에 따라 O(n^2 log n)까지 허용
- n*n 2차원 리스트를 모두 순회해야하는 문제

3. 입력 1,000,000 이하인 경우
- 최대 O(n log n)으로 끝내야 하는 문제
- 힙, 우선순위 큐
- 정렬
- 동적 계획법
- 위상 정렬
- 다익스트라 알고리즘

4. 입력이 100,000,000 이하인 경우
- 최대 O(n)으로 끝내야하는 문제
- 동적계획법
- 그리디

5. 그 이상인 경우
- 최대 O(logn)으로 끝내야하는 문제
- 거의 안나옴
- 이진 탐색.

[문제 유형]
1. 입력값이 작은 문제 (구현력 문제)
- 완전 탐색 / 백트래킹

2. 지도가 주어지고 채워진 영역을 찾아야 하는 경우
- BFS,DFS 문제
- FloodFill
- 전염병 문제
- 치즈 문제

[그래프 그림 있는 경우]
1. 최단 거리 찾기
=> 가장 빠른 길, 최단 거리
=> X 비용 내로 갈 수 있는 길을 찾아라
=> 다익스트라, BFS, DFS

2. 최소 신장 트리
- 가장 저렴한 방법으로 모든 경로 연결해라
- 경로가 아닌 "통신망", "전송 시간", "회로" "배관" 등등..

3. 그래프 (양방향, 단방향)
=> 크루스칼, 프림 알고리즘 사용.

4. 위상 정렬 문제
: 순서를 정해야 할 때 사용. ("순서", "차례")

[X라는 조건을 만족하는 가장 최대/최소값을 찾아라]
1. 결정 문제 => 파라매트릭 서치 이용하여 풀기.

[실시간으로 정렬이 이루어져야 하는 경우]
1. 우선순위 큐 또는 힙.

[DP 문제]
1. 특별한 알고리즘을 사용하는 문제가 아닐 것으로 생각되는 경우.

- 문제를 따라 먼저 초기값을 적는다.
- 초기값을 포함해 모든 상태값을 적는다.
- 현재 상태를 통해 다음 값을 구할 수 있는지 판단.
- 이전 상태들을 통해 현재 값을 구할 수 있는지 판단.

[문자열이 주어지는 경우]
1. 구현력 문제. (문자열 자르기 / 붙이기 / 탐색)

[현재 상황에서 가장 최적인 선택]
1. "가장 많은 선택을 할 수 있는"
2. 가장 작은/큰"
=> 그리디 문제일 가능성 높음. (예) 최소 신장 트리)





*/